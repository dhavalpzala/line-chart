{"version":3,"sources":["components/Header.js","components/LineChart.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","LineChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ctx","_this$props","series","minYear","maxYear","length","COLORS","labels","datasets","forEach","serie","data","sort","b","year","newColor","dataset","label","name","borderColor","backgroundColor","map","d","x","y","score","fill","lineTension","push","lineChart","Chart","type","options","responsive","title","display","text","tooltips","mode","scales","xAxes","scaleLabel","labelString","yAxes","id","Home","state","undefined","fileName","columnDefs","headerName","field","rowData","window","addEventListener","sizeColumnsToFit","bind","_this2","files","_ref","target","FileReader","reader","onload","_ref2","results","result","split","seriesData","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","values","seriesName","splice","value","yearAndScore","parseFloat","setState","gridApi","readAsText","params","api","_this$state","main","enableSorting","enableFilter","paginationAutoPageSize","pagination","onGridReady","_this$state2","onChange","onFileChage","renderData","components_LineChart","removeEventListener","App","components_Header","components_Home","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f943d13b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../css/Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"app-title\">Line Chart</div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Chart from 'chart.js';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ctx = 'lineChart';\n  }\n\n  componentDidUpdate() {\n    const { series, minYear, maxYear } = this.props;\n\n    if(series && series.length > 0) {\n      const COLORS = [\n      \t'#4dc9f6',\n      \t'#f67019',\n      \t'#f53794',\n      \t'#537bc4',\n      \t'#acc236',\n      \t'#166a8f',\n      \t'#00a950',\n      \t'#58595b',\n      \t'#8549ba'\n      ];\n\n      const labels = [];\n\n      const datasets = [];\n\n      series.forEach((serie) => {\n        serie.data.sort((a, b) => a.year - b.year);\n\n  \t\t\tconst newColor = COLORS[datasets.length % COLORS.length];\n\n        const dataset = {\n          label: serie.name,\n          borderColor: newColor,\n\t\t\t\t  backgroundColor: newColor,\n          data: serie.data.map(d => {\n            return {\n              x: d.year,\n              y: d.score\n            }\n          }),\n          fill: false,\n          lineTension: 0\n        };\n\n        datasets.push(dataset);\n      })\n\n      for (let year = minYear; year <= maxYear; year++) {\n        labels.push(year);\n      }\n\n      this.lineChart = new Chart(this.ctx, {\n        type: 'line',\n        data: {\n          labels,\n          datasets\n        },\n        options: {\n    \t\t\tresponsive: true,\n    \t\t\ttitle: {\n    \t\t\t\tdisplay: true,\n    \t\t\t\ttext: 'Series Line Chart'\n    \t\t\t},\n          tooltips: {\n            mode: 'x'\n          },\n    \t\t\tscales: {\n    \t\t\t\txAxes: [{\n    \t\t\t\t\tdisplay: true,\n    \t\t\t\t\tscaleLabel: {\n    \t\t\t\t\t\tdisplay: true,\n    \t\t\t\t\t\tlabelString: 'Year'\n    \t\t\t\t\t}\n    \t\t\t\t}],\n    \t\t\t\tyAxes: [{\n    \t\t\t\t\tdisplay: true,\n    \t\t\t\t\tscaleLabel: {\n    \t\t\t\t\t\tdisplay: true,\n    \t\t\t\t\t\tlabelString: 'Score'\n    \t\t\t\t\t}\n    \t\t\t\t}]\n    \t\t\t}\n\t\t\t  }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <canvas id={this.ctx} ></canvas>\n    );\n  }\n}\n\nexport default LineChart;\n","import React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport '../css/Home.css';\nimport LineChart from './LineChart';\n\nclass Home extends Component {\n  constructor () {\n    super();\n    this.state = {\n      series: [],\n      minYear: undefined,\n      maxYear: undefined,\n      fileName: '',\n      columnDefs: [{\n          headerName: \"Series\",\n          field: \"series\"\n        },\n        {\n          headerName: \"Year\",\n          field: \"year\"\n        },\n        {\n          headerName: \"Score\",\n          field: \"score\"\n        }],\n      rowData: []\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.sizeColumnsToFit.bind(this));\n  }\n\n  onFileChage({ target: { files } }) {\n    const lineDelimiter = '\\n';\n    const valueDelimiter = ',';\n    const dataDelimiter = '|';\n    if (FileReader && files.length > 0) {\n      let reader = new FileReader();\n      if (reader) {\n        reader.onload = ({ target: { result } }) => {\n          const results = result.split(lineDelimiter);\n          let seriesData = [];\n          let rowData = [];\n          let minYear = Number.MAX_SAFE_INTEGER, maxYear = Number.MIN_SAFE_INTEGER;\n\n          results.forEach((series) => {\n            if (series) {\n              let values = series.split(valueDelimiter);\n              const seriesName = values[0];\n\n              values = values.splice(1);\n\n              const data = values.map((value) => {\n                let yearAndScore = value.split(dataDelimiter),\n                  year = parseFloat(yearAndScore[0]),\n                  score = parseFloat(yearAndScore[1]);\n\n                if(year > maxYear) {\n                  maxYear = year;\n                }\n\n                if(year < minYear){\n                  minYear = year;\n                }\n\n                // add row data\n                rowData.push({\n                  series: seriesName,\n                  year,\n                  score\n                });\n\n                return {\n                  year,\n                  score\n                }\n              });\n\n              seriesData.push({\n                name: seriesName,\n                data\n              });\n            }\n          });\n\n          this.setState({\n            series: seriesData,\n            minYear,\n            maxYear,\n            rowData\n          });\n\n          // reset columns width\n          this.gridApi.sizeColumnsToFit();\n        }\n\n        reader.readAsText(files[0]);\n\n        this.setState({\n          fileName: files[0].name\n        })\n      }\n    }\n  }\n\n  onGridReady(params) {\n   this.gridApi = params.api;\n   this.gridApi.sizeColumnsToFit();\n  }\n\n  renderData() {\n    const { columnDefs, rowData } = this.state;\n    return ( <div className=\"ag-theme-balham series-data-container\">\n        <AgGridReact\n          enableSorting={true}\n          enableFilter={true}\n          paginationAutoPageSize={true}\n          pagination={true}\n          columnDefs={columnDefs}\n          rowData={rowData}\n          onGridReady={this.onGridReady.bind(this)}\n        />\n      </div>)\n  }\n\n  sizeColumnsToFit() {\n    this.gridApi.sizeColumnsToFit();\n  }\n\n  render() {\n    const { series, minYear, maxYear, fileName } = this.state;\n    return (\n      <section className=\"home-content\">\n        <div>\n          <div className=\"browse-container\">\n            <button className=\"browse-button\">Browse</button>\n            <input type=\"file\" onChange={this.onFileChage.bind(this)} />\n          </div>\n          <label>{ fileName }</label>\n        </div>\n        <div className=\"chart-data-container\">\n          { this.renderData() }\n          <div className=\"chart-container\">\n            <LineChart series={series} minYear={minYear} maxYear={maxYear} />\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.sizeColumnsToFit.bind(this));\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Home from './Home';\nimport '../css/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <section className=\"container\">\n        <Header />\n        <section className=\"app-content\">\n          <Home  />\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}